-- This script was generated by the ERD tool in pgAdmin 4.
-- Please log an issue at https://github.com/pgadmin-org/pgadmin4/issues/new/choose if you find any bugs, including reproduction steps.
BEGIN;


CREATE TABLE IF NOT EXISTS public.address
(
    id_address serial NOT NULL,
    street character varying(255) COLLATE pg_catalog."default",
    "number" character varying(255) COLLATE pg_catalog."default",
    neighborhood character varying(255) COLLATE pg_catalog."default",
    city character varying(255) COLLATE pg_catalog."default",
    state character varying(255) COLLATE pg_catalog."default",
    cep character varying(8) COLLATE pg_catalog."default",
    create_time timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT address_pkey PRIMARY KEY (id_address)
);

CREATE TABLE IF NOT EXISTS public.customer
(
    id_customer serial NOT NULL,
    id_address integer,
    first_name character varying(255) COLLATE pg_catalog."default",
    last_name character varying(255) COLLATE pg_catalog."default",
    cellphone character varying(255) COLLATE pg_catalog."default",
    cpf character(11) COLLATE pg_catalog."default",
    cnpj character(14) COLLATE pg_catalog."default",
    frequency integer,
    create_time timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT customer_pkey PRIMARY KEY (id_customer)
);

CREATE TABLE IF NOT EXISTS public.employee
(
    id_employee serial NOT NULL,
    id_address integer,
    first_name character varying(255) COLLATE pg_catalog."default",
    last_name character varying(255) COLLATE pg_catalog."default",
    email character varying(255) COLLATE pg_catalog."default",
    cellphone character varying(255) COLLATE pg_catalog."default",
    password character varying(255) COLLATE pg_catalog."default",
    birth_date date,
    cpf character(11) COLLATE pg_catalog."default",
    role character varying(255) COLLATE pg_catalog."default",
    wage numeric(10, 2),
    create_time timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT employee_pkey PRIMARY KEY (id_employee)
);

CREATE TABLE IF NOT EXISTS public.expense
(
    id_expense serial NOT NULL,
    name character varying(255) COLLATE pg_catalog."default",
    description character varying(255) COLLATE pg_catalog."default",
    category character varying(255) COLLATE pg_catalog."default",
    value numeric(10, 2),
    due_date date,
    payment_date date,
    create_time timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT expense_pkey PRIMARY KEY (id_expense)
);

CREATE TABLE IF NOT EXISTS public.finance_report
(
    id_sale integer NOT NULL,
    id_expense integer,
    name character varying(255) COLLATE pg_catalog."default",
    previous_cash numeric(10, 2),
    current_cash numeric(10, 2),
    gain numeric(10, 2),
    waste numeric(10, 2),
    create_time timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT finance_report_pkey PRIMARY KEY (id_sale),
    CONSTRAINT finance_report_id_expense_key UNIQUE (id_expense)
);

CREATE TABLE IF NOT EXISTS public.frequent_customer
(
    id_frequent_customer serial NOT NULL,
    id_customer integer,
    name character varying(255) COLLATE pg_catalog."default",
    amount_purchase integer,
    discount numeric(10, 2),
    create_time timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT frequent_customer_pkey PRIMARY KEY (id_frequent_customer)
);

CREATE TABLE IF NOT EXISTS public.product
(
    id_product serial NOT NULL,
    name character varying(255) COLLATE pg_catalog."default",
    category character varying(255) COLLATE pg_catalog."default",
    amount_stock integer,
    minimum_amount integer,
    amount_lost integer,
    selling_price numeric(10, 2),
    purchase_price numeric(10, 2),
    create_time timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT product_pkey PRIMARY KEY (id_product)
);

CREATE TABLE IF NOT EXISTS public.proof
(
    id_proof serial NOT NULL,
    id_sale integer,
    customer_name character varying(255) COLLATE pg_catalog."default",
    customer_cpf character(11) COLLATE pg_catalog."default",
    employee_name character varying(255) COLLATE pg_catalog."default",
    employee_cpf character(11) COLLATE pg_catalog."default",
    total_sale numeric(10, 2),
    payment_method character varying(255) COLLATE pg_catalog."default",
    create_time timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT proof_pkey PRIMARY KEY (id_proof),
    CONSTRAINT proof_id_sale_key UNIQUE (id_sale)
);

CREATE TABLE IF NOT EXISTS public.sale
(
    id_sale serial NOT NULL,
    id_employee integer,
    id_customer integer,
    total_sale numeric(10, 2),
    payment_method character varying(255) COLLATE pg_catalog."default",
    create_time timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT sale_pkey PRIMARY KEY (id_sale)
);

CREATE TABLE IF NOT EXISTS public.sale_item
(
    id_sale_item serial NOT NULL,
    id_sale integer,
    id_product integer,
    amount integer,
    create_time timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT sale_item_pkey PRIMARY KEY (id_sale_item)
);

CREATE TABLE IF NOT EXISTS public.stock_report
(
    id_product integer NOT NULL,
    id_employee integer,
    most_sale character varying(255) COLLATE pg_catalog."default" NOT NULL,
    less_sale character varying(255) COLLATE pg_catalog."default" NOT NULL,
    missing_product character varying(255) COLLATE pg_catalog."default" NOT NULL,
    low_product character varying(255) COLLATE pg_catalog."default" NOT NULL,
    create_time timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT stock_report_pkey PRIMARY KEY (id_product),
    CONSTRAINT stock_report_id_employee_key UNIQUE (id_employee)
);

CREATE TABLE IF NOT EXISTS public.supplier
(
    id_supplier serial NOT NULL,
    id_address integer,
    name character varying(255) COLLATE pg_catalog."default",
    email character varying(255) COLLATE pg_catalog."default",
    cellphone character varying(255) COLLATE pg_catalog."default",
    cnpj character(14) COLLATE pg_catalog."default",
    create_time timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT supplier_pkey PRIMARY KEY (id_supplier)
);

CREATE TABLE IF NOT EXISTS public.supply
(
    id_supplier integer NOT NULL,
    id_employee integer NOT NULL,
    id_product integer NOT NULL,
    amount integer,
    purchase_price numeric(10, 2),
    create_time timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT supply_pkey PRIMARY KEY (id_supplier, id_employee, id_product)
);

ALTER TABLE IF EXISTS public.customer
    ADD CONSTRAINT customer_id_address_fkey FOREIGN KEY (id_address)
    REFERENCES public.address (id_address) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE SET NULL;


ALTER TABLE IF EXISTS public.employee
    ADD CONSTRAINT employee_id_address_fkey FOREIGN KEY (id_address)
    REFERENCES public.address (id_address) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE SET NULL;


ALTER TABLE IF EXISTS public.finance_report
    ADD CONSTRAINT finance_report_id_expense_fkey FOREIGN KEY (id_expense)
    REFERENCES public.expense (id_expense) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;
CREATE INDEX IF NOT EXISTS finance_report_id_expense_key
    ON public.finance_report(id_expense);


ALTER TABLE IF EXISTS public.finance_report
    ADD CONSTRAINT finance_report_id_sale_fkey FOREIGN KEY (id_sale)
    REFERENCES public.sale (id_sale) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;
CREATE INDEX IF NOT EXISTS finance_report_pkey
    ON public.finance_report(id_sale);


ALTER TABLE IF EXISTS public.frequent_customer
    ADD CONSTRAINT frequent_customer_id_customer_fkey FOREIGN KEY (id_customer)
    REFERENCES public.customer (id_customer) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.proof
    ADD CONSTRAINT proof_id_sale_fkey FOREIGN KEY (id_sale)
    REFERENCES public.sale (id_sale) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;
CREATE INDEX IF NOT EXISTS proof_id_sale_key
    ON public.proof(id_sale);


ALTER TABLE IF EXISTS public.sale
    ADD CONSTRAINT sale_id_customer_fkey FOREIGN KEY (id_customer)
    REFERENCES public.customer (id_customer) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE SET NULL;


ALTER TABLE IF EXISTS public.sale
    ADD CONSTRAINT sale_id_employee_fkey FOREIGN KEY (id_employee)
    REFERENCES public.employee (id_employee) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE SET NULL;


ALTER TABLE IF EXISTS public.sale_item
    ADD CONSTRAINT sale_item_id_product_fkey FOREIGN KEY (id_product)
    REFERENCES public.product (id_product) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.sale_item
    ADD CONSTRAINT sale_item_id_sale_fkey FOREIGN KEY (id_sale)
    REFERENCES public.sale (id_sale) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.stock_report
    ADD CONSTRAINT stock_report_id_employee_fkey FOREIGN KEY (id_employee)
    REFERENCES public.employee (id_employee) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;
CREATE INDEX IF NOT EXISTS stock_report_id_employee_key
    ON public.stock_report(id_employee);


ALTER TABLE IF EXISTS public.stock_report
    ADD CONSTRAINT stock_report_id_product_fkey FOREIGN KEY (id_product)
    REFERENCES public.product (id_product) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;
CREATE INDEX IF NOT EXISTS stock_report_pkey
    ON public.stock_report(id_product);


ALTER TABLE IF EXISTS public.supplier
    ADD CONSTRAINT supplier_id_address_fkey FOREIGN KEY (id_address)
    REFERENCES public.address (id_address) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE SET NULL;


ALTER TABLE IF EXISTS public.supply
    ADD CONSTRAINT supply_id_employee_fkey FOREIGN KEY (id_employee)
    REFERENCES public.employee (id_employee) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.supply
    ADD CONSTRAINT supply_id_product_fkey FOREIGN KEY (id_product)
    REFERENCES public.product (id_product) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.supply
    ADD CONSTRAINT supply_id_supplier_fkey FOREIGN KEY (id_supplier)
    REFERENCES public.supplier (id_supplier) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;

END;